name: Continuous Integration

env:
  BUILD_NUMBER: ${{ github.run_number }}
  SPM_CACHE_PATH: /Users/runner/Library/Developer/Xcode/DerivedData/**/SourcePackages/checkouts"
  XCODE_VERSION: 14.2.0
  SCHEME: TransTracks
  VERSION_MAJOR: 1
  VERSION_MINOR: 4

on:
  push:
    branches: [ "production" ]
  pull_request:
    branches: [ "production" ]

concurrency:
  group: build-ios-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-version:
    runs-on: ubuntu-latest

    outputs:
      marketing-version: ${{ steps.version.outputs.marketing-version }}
      version-number: ${{ steps.version.outputs.version-number }}

    steps:
      - name: 🕵️‍♀️ Determining version
        id: version
        run: |
          baseBuildNumber=18
          resolvedBuildNumber=$(expr $baseBuildNumber + $VERSION_MAJOR * 100 + $VERSION_MINOR + $BUILD_NUMBER)
          echo "marketing-version=$VERSION_MAJOR.$VERSION_MINOR.$resolvedBuildNumber" >> "$GITHUB_OUTPUT"
          echo "version-number=$resolvedBuildNumber" >> "$GITHUB_OUTPUT"

  resolve-spm:
    runs-on: macos-latest

    steps:
      - name: 🚚 Checkout
        uses: actions/checkout@v3

      - name: 🍔 Get SPM cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ env.SPM_CACHE_PATH }}
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: 📀 Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 🤓 Resolve SPM
        if: ${{ !steps.cache.outputs.cache-hit }} # No direct cache hit
        run: xcodebuild -resolvePackageDependencies


  build:
    runs-on: macos-latest
    needs: [set-version,resolve-spm]

    steps:
      - name: 🚚 Checkout
        uses: actions/checkout@v3

      - name: ⏰ Restore Modified Timestamps
        uses: chetan/git-restore-mtime-action@v2

      - name: 🍔 Get SPM cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.SPM_CACHE_PATH }}
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: 📑 Create Google Services file
        env:
          GOOGLE_SERVICE_64: ${{ secrets.GOOGLE_SERVICE_64 }}
        run: echo $GOOGLE_SERVICE_64 | base64 --decode > ${{ env.SCHEME }}/GoogleService-Info.plist

      - name: 📑 Create Config plist file
        env:
          CONFIG_64: ${{ secrets.CONFIG_64 }}
        run: echo $CONFIG_64 | base64 --decode > ${{ env.SCHEME }}/config.plist

      - name: 📑 Create Info Config plist file
        env:
          INFO_CONFIG_64: ${{ secrets.INFO_CONFIG_64 }}
        run: echo $INFO_CONFIG_64 | base64 --decode > ${{ env.SCHEME }}/InfoConfig.plist

      - name: 📀 Setup Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 👷‍♀️ Build
        env:
          MARKETING_VERSION: ${{ needs.set-version.outputs.marketing-version }}
          VERSION_NUMBER: ${{ needs.set-version.outputs.version-number }}
        run: |
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          xcodebuild -scheme $SCHEME -sdk iphonesimulator -destination 'platform=iOS Simulator,name=$device' test